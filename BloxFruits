if not game:IsLoaded() then
    game.Loaded:Wait()
end

local LocalPlayer = game:GetService("Players").LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)

local function returnHRP()
    if not LocalPlayer.Character then return end
    if not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    return LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
end

local function returnHUM()
    if not LocalPlayer.Character then return end
    if not LocalPlayer.Character:FindFirstChild("Humanoid") then return end
    return LocalPlayer.Character:FindFirstChild("Humanoid")
end

local function spoofHRP()
    return true
end

local function spoofHUM()
    return true
end

local function TpTo(CFrame, Refresh)
    if Refresh then
        returnHUM().Health = 0
        LocalPlayer.CharacterAdded:Wait()
        repeat
            task.wait()
        until returnHRP() and returnHUM()
        spoofHRP()
        spoofHUM()
    else
        spoofHRP()
    end
    returnHRP().CFrame = CFrame
    return true
end

local function runFruitCollector()
    repeat
        task.wait()
    until game:GetService("Players") and game:GetService("Workspace") and game:GetService("ReplicatedStorage")

    repeat
        local success, result = pcall(function()
            return ReplicatedStorage.Remotes.CommF_:InvokeServer("SetTeam", "Pirates")
        end)
        if not success then
            warn("Failed to set team: " .. tostring(result))
        end
        task.wait(3)
    until LocalPlayer.Team == "Pirates"

    repeat
        task.wait()
    until returnHRP() and returnHUM()

    local Fruit_InServer = false
    local Fruits_InServer = {}
    local Fruit_InHand = nil

    for _, v in ipairs(Workspace:GetChildren()) do
        if v:IsA("Tool") then
            Fruit_InServer = true
            table.insert(Fruits_InServer, v)
        end
    end

    if Fruit_InServer then
        for _, v in pairs(Fruits_InServer) do
            if returnHRP() and v:IsDescendantOf(Workspace) then
                TpTo(v.Handle.CFrame, false)
                task.wait(3)
                Fruit_InHand = string.gsub(v.Name, " Fruit", "")
                Fruit_InHand = Fruit_InHand .. "-" .. Fruit_InHand
                local success, result = pcall(function()
                    return ReplicatedStorage.Remotes.CommF_:InvokeServer("StoreFruit", Fruit_InHand, returnHRP().Parent:FindFirstChildOfClass("Tool"))
                end)
                if success then
                    print("Stored fruit: " .. Fruit_InHand)
                else
                    warn("Failed to store fruit: " .. tostring(result))
                end
                task.wait(0.2)
            end
        end
    end

    task.wait(1)
    local success, module = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/LeoKholYt/roblox/main/lk_serverhop.lua"))()
    end)
    if success and module then
        module:Teleport(game.PlaceId)
    else
        warn("Failed to load server hop module. Retrying in 5 seconds...")
        task.wait(5)
        return false
    end
    task.wait(10)
    return true
end

local function init()
    while true do
        local success, result = pcall(runFruitCollector)
        if not success then
            warn("Script error: " .. tostring(result))
            task.wait(5)
        elseif not result then
            task.wait(5)
        else
            task.wait(10)
        end
    end
end

init()

LocalPlayer.OnTeleport:Connect(function(state)
    queueteleport('print("LOADED"); loadstring(game:HttpGet("https://raw.githubusercontent.com/MadbukScripts/Scripts/refs/heads/main/BloxFruits"))()')
end)
